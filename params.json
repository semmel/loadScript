{"name":"Loadscript","tagline":"Small JS script loader utility; allows client-side script substitution.","body":"Overview\r\n========\r\n\r\n`loadScript()` is a global function for performing asynchronous script loads.\r\n\r\n[Run unit tests.](http://semmel.github.io/loadScript/test.html)\r\n\r\nFeatures\r\n========\r\n\r\n * Tiny! (1kB minified)\r\n * Supports .noConflict()\r\n * For developers, allows you to rewrite script URLs based on localStorage\r\n   string substitution rules, making it easy to develop a new version of your\r\n   JS products, even working off of a production site!\r\n * success and failure callback\r\n\r\n\r\nHow does that work, exactly?\r\n============================\r\n\r\nInclude loadScript.js via a script tag:\r\n\r\n```html\r\n\t<script src=\"loadScript.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nIf you want to make use of the URL substitution feature, do this:\r\n\r\n```javascript\r\n\tloadScript.key = 'my_localStorage_key';\r\n```\r\n\r\nActually loading a script is easy:\r\n\r\n```javascript\r\n\tvar jqURL = '//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js';\r\n\tloadScript(jsURL, function () {\r\n\t\t// jQuery is now loaded!\r\n\t});\r\n```\r\n\r\nNow if you, as a developer, want to test out your production site with the\r\nnon-minified jQuery source for debugging purposes, just use the browser's dev\r\ntools to set a localStorage value:\r\n\r\n```javascript\r\n\tlocalStorage.setItem('my_localStorage_key', '[[\".min\",\"\"]]');\r\n```\r\n\r\nNow when you refresh the page, loadScript() will perform a string substitution\r\non your URLs to remove the '.min' substring.  This will only affect you, not\r\nother users of the site.\r\n\r\nThe localStorage value must be a valid JSON stringified array of arrays, where\r\neach inner array has exactly two elements: `[<searchtext>,<replacetext>]`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}